#! /usr/bin/env bash
## Snakefile
####################
import glob
import re

BASE_DIR = workflow.basedir + "/../"
#suffix for single-end reads
SE = config["SE_SUFFIX"]
#suffix for paired-end reads
R1 = config["R1_SUFFIX"]
R2 = R1.replace("1","2")
#R2 = config["R2_SUFFIX"]
fastqs_p1 = glob.glob("fastq/*"+R1+"*")
# sort the fastqs in order the R1 and R2 files to match each othter. 
fastqs_p1.sort()
fastqs_p2 = glob.glob("fastq/*"+R2+"*")
fastqs_p2.sort()
fastqs_se = glob.glob("fastq/*"+SE+"*")
fastqs_se = [x for x in fastqs_se if x not in fastqs_p1 and x not in fastqs_p2 ]

SAMPLES_SE = [re.sub("fastq/(.+)"+ SE +".*$","\\1",a) for a in fastqs_se]
SAMPLES_PE = [re.sub("fastq/(.+)"+ R1 +".*$","\\1",a) for a in fastqs_p1]
SAMPLES_PE.sort()
FASTQ_DICT = dict(zip(SAMPLES_SE,fastqs_se))
for idx in range(len(fastqs_p1)):
  FASTQ_DICT[SAMPLES_PE[idx]] = [fastqs_p1[idx],fastqs_p2[idx]]

SAMPLES = SAMPLES_SE + SAMPLES_PE

## annotation path
GENOME = config["GENOME"]
STAR_INDEX = config["STAR_INDEX_PATH"]+GENOME
GTF_DICT = {"hg19":"gencode.v19.annotation.gtf","mm10":"gencode.vM14.annotation.gtf"}
GTF = GTF_DICT[GENOME]
# dependencies.
MARKDUP=BASE_DIR+"dependencies/picard.jar MarkDuplicates"


print(SAMPLES)

rule all:
  input: 
    expand("featureCounts/{sample}.counts",sample=SAMPLES),
    expand("rpkm/{sample}-chrM.rpkm",sample=SAMPLES),
    expand("combined-chrM.rpkm"),
    expand("combined-chrM.counts"),
    expand("bigWig/{sample}.nodup.bw",sample=SAMPLES)



rule star_align:
  output: 
    bam1=temp("STAR_out/{sample}/Aligned.sortedByCoord.out.bam"),
    bam2=temp("bam/{sample}.sorted.bam")
  input:
    lambda wildcards: FASTQ_DICT[wildcards.sample]
  threads: 10 
  run:
    fastqs = " ".join(input)
    if fastqs.endswith(".bz2"): 
      format = "bzcat"
    elif fatqs.endswith(".gz"):
        format = "zcat"
    else: 
        format = ""
    shell(
    "STAR --genomeDir {STAR_INDEX} --readFilesIn {fastqs} "
    "--runThreadN {threads} "
    "--outFileNamePrefix STAR_out/{wildcards.sample}/ "
    "--outFilterMultimapScoreRange 1 "
    "--outFilterMultimapNmax 20 "
    "--outFilterMismatchNmax 10 "
    "--alignIntronMax 500000 "
    "--alignMatesGapMax 1000000 "
    "--sjdbScore 2 "
    "--alignSJDBoverhangMin 3 "
    "--genomeLoad NoSharedMemory "
    "--readFilesCommand {format} "
    "--sjdbOverhang 100 "
    "--outSAMstrandField intronMotif "
    "--outSAMtype BAM SortedByCoordinate "
    "--twopassMode Basic ;"
    "ln {output.bam1} {output.bam2};"
    )

rule bam_rmdup:
  input:
    bam = "bam/{sample}.sorted.bam",
  output:
    bam = "bam/{sample}.nodup.bam",
    bai = "bam/{sample}.nodup.bam.bai",
    qc = "qc/{sample}.dup.qc"
  log:
    "logs/markdup/{sample}.markdup.log"
  threads: 3
  shell:
    "java -Xmx12G -XX:ParallelGCThreads=3 -jar {MARKDUP} TMP_DIR=tmp/{wildcards.sample} INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.qc} VALIDATION_STRINGENCY=LENIENT ASSUME_SORTED=true REMOVE_DUPLICATES=true 2> {log};"
    "samtools index {output.bam}"

rule bam2bigwig:
  input:
    bam = "bam/{sample}.nodup.bam"
  output: 
    bw = "bigWig/{sample}.nodup.bw"
  threads: 6
  shell:
    "bamCoverage -b {input.bam} -o {output.bw} --outFileFormat bigwig "
    "-bs 50 --numberOfProcessors {threads} --normalizeUsing RPKM"

#rule htseq: 
#  input:
#    "bam/{sample}.nodup.bam"
#  output:
#    "counts/{sample}.counts"
#  threads: 1
#  shell: 
#    " htseq-count -m intersection-nonempty -i gene_id -r pos -s no -f bam "
#    " {input} {BASE_DIR}/annotation/gtf/{GTF} > {output}"

rule feature_count_rpkm:
  input:
    bam ="bam/{sample}.nodup.bam",
    bai = "bam/{sample}.nodup.bam.bai",
  output:
    counts = "featureCounts/{sample}.counts",
    rpkm = "rpkm/{sample}-chrM.rpkm"
  threads: 1
  shell:
    "featureCounts -a {BASE_DIR}/annotation/gtf/{GTF} -o {output.counts} {input.bam} "
    " -F GTF -T {threads} -t exon -g gene_name; "
    "grep -v 'chrM' {output.counts} | Rscript {BASE_DIR}/scripts/featurecounts2rpkm.r - > {output.rpkm}"


rule combine_counts_rpkms:
  input:
    counts = expand("featureCounts/{samples}.counts",samples=SAMPLES),
    rpkms = expand("rpkm/{samples}-chrM.rpkm",samples=SAMPLES),
  output: 
    rpkm = "{sample}.rpkm",
    count = "{sample}.counts"
  threads: 1
  shell:
    "len=$(ls {input.counts}|wc -l);"
    "paste {input.rpkms} |cut -f 1-6,$(seq -s, 7 7 $((7*len))) > {output.rpkm};"
    "paste {input.counts} |cut -f 1-6,$(seq -s, 7 7 $((7*len))) |"
    "grep -v 'chrM' > {output.count}"

